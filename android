1.32位表示的浮点数转浮点数 
正数
01000010111110110000000000000000 
Float.intBitsToFloat(Integer.parseInt("01000010111110110000000000000000",2))=>125.5
00111111000000000000000000000000
Float.intBitsToFloat(Integer.parseInt("00111111000000000000000000000000",2))=>0.5

负数
11000010111110110000000000000000 
转为正数01000010111110110000000000000000 
Float.intBitsToFloat(Integer.parseInt("01000010111110110000000000000000",2))=>125.5
补符号位
-125.5
10111111000000000000000000000000
转为正数00111111000000000000000000000000
Float.intBitsToFloat(Integer.parseInt("00111111000000000000000000000000",2))=>0.5
补符号位
-0.5

2.浮点数转32位表示的浮点数(16进制表示=>2进制表示)
方法一：
Integer.toBinaryString(Float.floatToIntBits(37.7f)) 
=> 1000010000101101100110011001101 
补符号位
=> 01000010000101101100110011001101
Integer.toBinaryString
=>11000010000101101100110011001101  
无需补符号位
方法二：
Float.toHexString(37.7f) =>0x1.2d999ap5(16进制表示) 
=> 1.0010 1101 1001 1001 1001 1010 p5 
=> 0(符号位) 10000100(127+5) 0010 1101 1001 1001 1001 101 (小数部分，整数部分1去掉，因为一定是1)
